// Generated by CoffeeScript 1.9.3
(function() {
  var BOT_LAYERS_RE, DRL_LAYERS_RE, TOP_LAYERS_RE, boardShape, find, genericType, layerProps, lyId, result, sortLayers;

  find = require('lodash.find');

  result = require('lodash.result');

  layerProps = require('./_layer-props');

  boardShape = require('./board-shape');

  TOP_LAYERS_RE = /^(t)|(out)/;

  BOT_LAYERS_RE = /^(b)|(out)/;

  DRL_LAYERS_RE = /^drl$/;

  genericType = function(type) {
    if (type !== 'out' && type !== 'drl') {
      return type.slice(1);
    } else {
      return type;
    }
  };

  lyId = function(id, side, type) {
    return id + "_" + side + "-" + type;
  };

  sortLayers = function(layers, board) {
    var bottomDefs, bottomLayers, children, defs, drillLayerGroup, drillLayerProps, gType, group, i, len, ly, props, sorted, svg, topDefs, topLayers, type;
    if (layers == null) {
      layers = [];
    }
    topLayers = {};
    topDefs = [];
    bottomLayers = {};
    bottomDefs = [];
    drillLayerGroup = [];
    drillLayerProps = null;
    for (i = 0, len = layers.length; i < len; i++) {
      ly = layers[i];
      svg = ly.svg;
      children = svg.svg._;
      type = ly.type;
      props = layerProps(svg);
      gType = genericType(type);
      group = result(find(children, 'g'), 'g', {
        _: []
      });
      defs = result(find(children, 'defs'), 'defs', {
        _: []
      });
      if (type === 'out') {
        props.manifoldFlags = boardShape(group._);
      }
      if (type === 'drl') {
        drillLayerGroup = drillLayerGroup.concat(group._);
        topDefs = topDefs.concat(defs._);
        bottomDefs = bottomDefs.concat(defs._);
        if (drillLayerProps != null) {
          drillLayerProps.bBox.add(props.bBox);
        } else {
          drillLayerProps = props;
        }
      } else {
        if (TOP_LAYERS_RE.test(type)) {
          topLayers[gType] = {
            id: lyId(board, 'top', gType),
            _: group._,
            props: props
          };
          topDefs = topDefs.concat(defs._);
        }
        if (BOT_LAYERS_RE.test(ly.type)) {
          bottomLayers[gType] = {
            id: lyId(board, 'bottom', gType),
            _: group._,
            props: props
          };
          bottomDefs = bottomDefs.concat(defs._);
        }
      }
    }
    if (drillLayerGroup.length) {
      topLayers.drl = {
        id: lyId(board, 'top', 'drl'),
        _: drillLayerGroup,
        props: drillLayerProps
      };
      bottomLayers.drl = {
        id: lyId(board, 'bottom', 'drl'),
        _: drillLayerGroup,
        props: drillLayerProps
      };
    }
    sorted = {};
    if (Object.keys(topLayers).length) {
      sorted.top = {
        layers: topLayers,
        defs: topDefs
      };
    }
    if (Object.keys(bottomLayers).length) {
      sorted.bottom = {
        layers: bottomLayers,
        defs: bottomDefs
      };
    }
    return sorted;
  };

  module.exports = sortLayers;

}).call(this);
