// Generated by CoffeeScript 1.10.0
(function() {
  var BoundingBox, stackLayers;

  BoundingBox = require('./_bounding-box');

  stackLayers = function(sortedLayers, boardId) {
    var bBox, cf, cfMask, coverRect, cu, defs, drl, drlGroup, firstManifoldIndex, group, halfStrokeWidth, i, index, layers, len, manifoldFlags, manifoldOutline, maskId, mechMask, out, outlinePath, p, ref, scale, sm, smCover, smGroup, smMask, smSsGroup, sp, ss, ssGroup, units;
    if (boardId == null) {
      boardId = '';
    }
    defs = sortedLayers.defs;
    layers = sortedLayers.layers;
    bBox = new BoundingBox();
    scale = null;
    units = null;
    mechMask = null;
    maskId = null;
    group = [];
    manifoldOutline = false;
    cu = layers.cu;
    sm = layers.sm;
    ss = layers.ss;
    sp = layers.sp;
    out = layers.out;
    drl = layers.drl;
    if (out != null) {
      manifoldFlags = out.props.manifoldFlags;
      firstManifoldIndex = manifoldFlags.indexOf(true);
      if (firstManifoldIndex !== -1) {
        manifoldOutline = true;
        outlinePath = out._[firstManifoldIndex];
        halfStrokeWidth = outlinePath.path['stroke-width'] / 2;
        scale = out.props.scale;
        units = out.props.units;
        bBox.add(out.props.bBox);
        bBox.offset(-halfStrokeWidth);
        maskId = out.id.slice(0, -4) + "_mech-mask";
        mechMask = {
          mask: {
            id: maskId,
            fill: '#fff',
            stroke: '#fff',
            _: []
          }
        };
        ref = out._;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          p = ref[index];
          if (manifoldFlags[index]) {
            mechMask.mask['fill-rule'] = 'evenodd';
            mechMask.mask._.push({
              path: {
                'stroke-width': 0,
                d: p.path.d
              }
            });
          } else {
            mechMask.mask._.push(p);
          }
        }
      }
    }
    if (cu != null) {
      if (!manifoldOutline) {
        bBox.add(cu.props.bBox);
        scale = cu.props.scale;
        units = cu.props.units;
      }
      defs.push({
        g: {
          id: cu.id,
          fill: 'currentColor',
          stroke: 'currentColor',
          _: cu._
        }
      });
      group.push({
        use: {
          "class": boardId + "_board-cu",
          'xlink:href': "#" + cu.id
        }
      });
    }
    if (sm != null) {
      if (!manifoldOutline) {
        bBox.add(sm.props.bBox);
        if (ss != null) {
          bBox.add(ss.props.bBox);
        }
      }
      smGroup = {
        g: {
          id: sm.id,
          fill: 'currentColor',
          stroke: 'currentColor',
          _: sm._
        }
      };
      smMask = {
        mask: {
          id: sm.id + "_mask",
          color: '#000',
          _: [
            bBox.rect('#fff'), {
              use: {
                'xlink:href': "#" + sm.id
              }
            }
          ]
        }
      };
      cfMask = {
        mask: {
          id: cu.id + "_finish-mask",
          color: '#fff',
          _: [
            {
              use: {
                'xlink:href': "#" + cu.id
              }
            }
          ]
        }
      };
      smCover = bBox.rect();
      smCover.rect["class"] = boardId + "_board-sm";
      smSsGroup = {
        g: {
          mask: "url(#" + sm.id + "_mask)",
          _: [smCover]
        }
      };
      if (ss != null) {
        ssGroup = {
          g: {
            id: ss.id,
            "class": boardId + "_board-ss",
            fill: 'currentColor',
            stroke: 'currentColor',
            _: ss._
          }
        };
        smSsGroup.g._.push(ssGroup);
      }
      cf = {
        use: {
          "class": boardId + "_board-cf",
          mask: "url(#" + cfMask.mask.id + ")",
          'xlink:href': "#" + sm.id
        }
      };
      group.push({
        g: {
          _: [
            {
              defs: {
                _: [smGroup, smMask, cfMask]
              }
            }, smSsGroup, cf
          ]
        }
      });
    }
    if (sp != null) {
      if (!manifoldOutline) {
        bBox.add(sp.props.bBox);
      }
      group.push({
        g: {
          id: sp.id,
          "class": boardId + "_board-sp",
          fill: 'currentColor',
          stroke: 'currentColor',
          _: sp._
        }
      });
    }
    if ((out != null) && !manifoldOutline) {
      bBox.add(out.props.bBox);
      group.push({
        g: {
          id: out.id,
          "class": boardId + "_board-out",
          fill: 'currentColor',
          stroke: 'currentColor',
          _: out._
        }
      });
    }
    if (drl != null) {
      drlGroup = {
        g: {
          id: drl.id,
          fill: '#000',
          stroke: '#000',
          _: drl._
        }
      };
      if (mechMask == null) {
        bBox.add(drl.props.bBox);
        maskId = drl.id.slice(0, -4) + "_mech-mask";
        mechMask = {
          mask: {
            id: maskId,
            _: [bBox.rect('#fff')]
          }
        };
      }
      mechMask.mask._.push(drlGroup);
    }
    if (mechMask != null) {
      defs.push(mechMask);
    }
    coverRect = bBox.rect();
    coverRect.rect["class"] = boardId + "_board-fr4";
    group.unshift(coverRect);
    return {
      defs: defs,
      maskId: maskId,
      group: group,
      units: units,
      scale: scale,
      bBox: bBox
    };
  };

  module.exports = stackLayers;

}).call(this);
